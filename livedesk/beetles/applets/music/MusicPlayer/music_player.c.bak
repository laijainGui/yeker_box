/*
**************************************************************************************************************
*											         ePDK
*						            the Easy Portable/Player Develop Kits
*									           desktop system 
*
* File    	: 	music_player.h
*			
* By      	: 	Libaiao
* Func	: 
* Version	: 	v1.0
* ============================================================================================================
* 2010-5-3 15:24:52  Libaiao  create this file, implements the fundemental interface;
**************************************************************************************************************
*/




#include "beetles_app.h"
#include "music.h"
#include "music_ui.h"
#include "music_list.h"
#include "music_player.h"

#include "player_face.h"

#include "spectrum_i.h"

//#include "Music_spectrum.h"

static __u32 MusicTimerId = 0x00;

H_WIN music_player_win_create(H_WIN h_parent, music_player_ctrl_t *para);
static __s32 _music_player_win_cb(__gui_msg_t *msg);
static __s32 music_player_win_key_proc(__gui_msg_t *msg);
static __s32 music_player_scene_create(H_WIN  music_frame_win);								//创建场景
static __s32 music_player_win_on_close(__gui_msg_t *msg);
static __s32  music_player_win_on_destroy(__gui_msg_t *msg);
static __s32 music_player_win_on_paint(H_WIN  music_frame_win);


static __s32 music_play_file(music_player_ctrl_t *player_ctrl, char *filename);

static __s32 music_player_device_init(music_player_ctrl_t *player_ctrl);	//播放音频设备初始化
static __s32 music_player_device_uninit(music_player_ctrl_t *player_ctrl);//关闭音频设备

static __s32 music_player_win_on_timer(__gui_msg_t *msg);
//extern __s32 draw_music_player_background(music_player_ctrl_t *player_ctrl);

/*
************************************************************************************************************************
*Function	:          H_WIN music_player_win_create(H_WIN h_parent, music_player_ctrl_t *para)
*
*Description	: 		创建MusicPlayer framewin
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
H_WIN music_player_win_create(H_WIN h_parent, music_player_ctrl_t *para)
{	
	__gui_framewincreate_para_t framewin_para;
	music_player_ctrl_t *music_player_ctrl;
	FB fb;
	
	GUI_LyrWinGetFB(para->music_layer, &fb);
	
	music_player_ctrl = (music_player_ctrl_t *)esMEMS_Balloc(sizeof(music_player_ctrl_t));
	eLIBs_memset((void*)music_player_ctrl, 0, sizeof(music_player_ctrl_t));
	
	music_player_ctrl->font = para->font;
	music_player_ctrl->background_layer = para->background_layer;	
	music_player_ctrl->music_layer = para->music_layer;		
	
	music_player_ctrl->media_type = para->media_type;		//photo, music, movie
	
	music_player_ctrl->root_type = para->root_type;							//SD or USB device
	//music_player_ctrl->view_mode = para->view_mode;							//list or square	
	//ExplorerListWinGetSearchPath(list_para);	
	//eLIBs_memcpy(music_player_ctrl->search_path,"e:", sizeof("e:"));
	eLIBs_memset(&framewin_para, 0, sizeof(__gui_framewincreate_para_t));
	framewin_para.name =	"Explorer List window",
	framewin_para.dwExStyle = WS_EX_NONE;
	framewin_para.dwStyle = WS_NONE|WS_VISIBLE;
	framewin_para.spCaption =  NULL;
	framewin_para.hOwner	= NULL;
	framewin_para.id        = MUSIC_LIST_WIN_ID;	
	framewin_para.hHosting = h_parent;
	framewin_para.FrameWinProc = (__pGUI_WIN_CB)esKRNL_GetCallBack((__pCBK_t)_music_player_win_cb);
	framewin_para.rect.x =0;
	framewin_para.rect.y = 0;
	framewin_para.rect.width= fb.size.width;
	framewin_para.rect.height = fb.size.height;
	framewin_para.BkColor.alpha =  0;
	framewin_para.BkColor.red = 0;
	framewin_para.BkColor.green = 255;
	framewin_para.BkColor.blue = 0;
	framewin_para.attr =  (void *)music_player_ctrl;
	framewin_para.hLayer = music_player_ctrl->music_layer;			//会被listbar调用
	return (GUI_FrmWinCreate(&framewin_para));									//在framewin 的create消息中将handle,传送给music_player_ctrl->h_framewin
}



/*
************************************************************************************************************************
*Function	:          static __s32 _music_player_win_cb(__gui_msg_t *msg)
*
*Description	: 		framewin 消息处理函数
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32 _music_player_win_cb(__gui_msg_t *msg)
{
    __s32 ret = EPDK_OK;    
    __gui_msg_t send;                             
    
    eLIBs_memset(&send, 0, sizeof(__gui_msg_t));
    
    switch(msg->id)
    {
        case GUI_MSG_CREATE:                             
          	__msg("----explorer frame window GUI_MSG_CREATE begin----\n");
			music_player_scene_create(msg->h_deswin);   									//on create message             
          	break;
		case GUI_MSG_PAINT:
			__msg("----explorer frame window GUI_MSG_ONPAINT----\n");
			music_player_win_on_paint(msg->h_deswin);			
			break;
        case GUI_MSG_CLOSE:
			__msg("----explorer frame window GUI_MSG_CLOSE begin----\n"); 
			music_player_win_on_close(msg);			
          	break;            
        case GUI_MSG_DESTROY:	
          	__msg("----explorer frame window GUI_MSG_DESTROY begin----\n"); 			
			music_player_win_on_destroy(msg);		
          	__msg("----explorer frame window GUI_MSG_DESTROY end----\n");
          	break;
        case GUI_MSG_COMMAND:			
			break;
		case GUI_MSG_KEY:
			music_player_win_key_proc(msg);
			break;
		case GUI_MSG_TIMER:
			music_player_win_on_timer(msg);
			break;
        default:
            ret = GUI_FrmWinDefaultProc(msg);
            break;
    }    
    return ret;	
}


//NextKey处理函数
static __s32 music_explorer_on_next_key(__gui_msg_t *msg)
{
	music_player_ctrl_t *player_ctrl;
	music_list_ctrl_t *ListCtrl;
	char *filename;	
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	ListCtrl = player_ctrl->list_ctrl;
	filename = player_ctrl->play_file_info.filename;
	
	ListCtrl->OnNextKey((void *)ListCtrl);				//listbar on nextkey
	
	get_music_list_focus_item_full_filename(ListCtrl, filename);	
	
	music_play_file(player_ctrl, filename);		
	return EPDK_OK;
}

//NextKey处理函数
static __s32 music_explorer_on_previous_key(__gui_msg_t *msg)
{
	music_player_ctrl_t *player_ctrl;
	music_list_ctrl_t *ListCtrl;
	char *filename;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	ListCtrl = player_ctrl->list_ctrl;
	filename = player_ctrl->play_file_info.filename;
	
	ListCtrl->OnPreviousKey((void *)ListCtrl);			//listbar on previous key
	
	get_music_list_focus_item_full_filename(ListCtrl, filename);	
	
	music_play_file(player_ctrl, filename);		
	return EPDK_OK;
}

static __s32 music_explorer_on_menu_key(__gui_msg_t *msg)
{
	music_player_ctrl_t *this;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);

	if(this->menu_mode == MUSIC_EXPLORER_MODE)
	{
		this->menu_mode = MUSIC_SET_PLAYER_MODE;
		
		GUI_LyrWinCacheOff();
		
		ClearMusicPlayerContrlButtonBG();
		DrawMusicPlayerContrlButton(this);
		DrawMusicPlayerContrlButtonByID(this,this->menu_id,FOCUSED);
		
		GUI_LyrWinCacheOn();
	}
	else
	{
		//this->menu_mode = MUSIC_EXPLORER_MODE;
		//__msg("error in music explorer");
	}
	return EPDK_OK;
}
static __s32 music_explorer_key_proc(__gui_msg_t *msg)
{
	music_player_ctrl_t *player_ctrl;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);

	if((KEY_DOWN_ACTION == msg->dwAddData2)||(KEY_REPEAT_ACTION == msg->dwAddData2))
	{
		switch(msg->dwAddData1)
		{
			case GUI_MSG_KEY_RIGHT:
			case GUI_MSG_KEY_LONGRIGHT:					
			case GUI_MSG_KEY_UP:
			case GUI_MSG_KEY_LONGUP:							
				__msg("----explorer list window on UP key----\n");
				//_long_string_stop_roll();
				//ExplorerListWinOnNextItem(list_para);				
				music_explorer_on_next_key(msg);
				break;
			case GUI_MSG_KEY_LEFT:	
			case GUI_MSG_KEY_LONGLEFT:
			case GUI_MSG_KEY_DOWN:
			case GUI_MSG_KEY_LONGDOWN:	
				__msg("----explorer list window on DOWN key----\n");
				//ExplorerListWinOnPreviousItem(list_para);
				//ListCtrl->OnPreviousKey((void *)ListCtrl);
				music_explorer_on_previous_key(msg);
				break;				
			case GUI_MSG_KEY_VADD:
				break;
			case GUI_MSG_KEY_VDEC:
				//ExplorerListWinOnPreviousPage(list_para);
				break;				
			case GUI_MSG_KEY_ENTER:	
			case GUI_MSG_KEY_MENU:
			//case GUI_MSG_KEY_LONGMENU:
				music_explorer_on_menu_key(msg);
				break;
			case GUI_MSG_KEY_ESCAPE:		
				//explorer_cmd2parent(msg->h_deswin, SWITCH_TO_OTHER_APP, EXPLR_SW_TO_MAIN, 0);
				break;
			case GUI_MSG_KEY_RISE:
				break;
			default:
				break;				
		}
	}
	return EPDK_OK;

}


//检测播放状态,并根据playmode获得相关的文件,启动播放器
static __s32 music_player_check_play_status_on_timer(music_player_ctrl_t *this)
{
	__cedar_status_t  status;
	__s32 index;
	char *filename;
	music_list_ctrl_t *ListCtrl;
	
	status = robin_get_fsm_status();
	if(status == CEDAR_STAT_STOP)
	{
		index = robin_npl_get_next();
		if(index != -1)
		{
			ListCtrl = this->list_ctrl;					
			
			filename = this->play_file_info.filename;
			robin_npl_index2file(index, filename);
			music_play_file(this, filename);
			if(this->play_mode != RAT_PLAY_MODE_RANDOM)
			{
				ListCtrl->OnNextKey((void *)ListCtrl);					//listbar on next key				
			}
			if(this->play_mode != RAT_PLAY_MODE_ONLY_ONCE)
			{
				ListCtrl->OnNextKey((void *)ListCtrl);					//listbar on next key				
			}
		}
		//robin_npl_get_cur(void);
	}
	return EPDK_OK;
}

static __s32 music_player_set_play_mode(music_player_ctrl_t *this)
{	
	switch(this->play_mode)
	{
		case RAT_PLAY_MODE_SEQUENCE:
			this->play_mode = RAT_PLAY_MODE_ROTATE_ONE;
			break;
		case RAT_PLAY_MODE_ROTATE_ONE:
			this->play_mode = RAT_PLAY_MODE_ROTATE_ALL;
			break;
		case RAT_PLAY_MODE_ROTATE_ALL:
			this->play_mode = RAT_PLAY_MODE_ONLY_ONCE;
			break;
		case RAT_PLAY_MODE_ONLY_ONCE:
			this->play_mode = RAT_PLAY_MODE_RANDOM;
			break;
		case RAT_PLAY_MODE_RANDOM:
			this->play_mode = RAT_PLAY_MODE_SEQUENCE;
			break;
		default:
			break;
	}
	
	DrawMusicPlayModeButton(this->play_mode,PRESSED);
	DrawMusicPlayModeStatus(this->play_mode);	
	
	robin_set_play_mode(this->play_mode);
	
	return EPDK_OK;
}

static __s32 music_player_set_EQ_mode(music_player_ctrl_t *this)
{
	__cedar_audio_eq_t eq_mode;

	switch(this->EQ_mode)
	{
		case MUSIC_EQ_NORMAL:
			this->EQ_mode = MUSIC_EQ_ROCK;
			eq_mode = CEDAR_AUD_EQ_TYPE_ROCK;
			break;
		case MUSIC_EQ_ROCK:
			this->EQ_mode = MUSIC_EQ_CLASSIC;
			eq_mode = CEDAR_AUD_EQ_TYPE_CLASSIC;
			break;
		case MUSIC_EQ_CLASSIC:
			this->EQ_mode = MUSIC_EQ_JAZZ;
			eq_mode = CEDAR_AUD_EQ_TYPE_JAZZ;
			break;
		case MUSIC_EQ_JAZZ:
			this->EQ_mode = MUSIC_EQ_POP;
			eq_mode = CEDAR_AUD_EQ_TYPE_POP;
			break;
		case MUSIC_EQ_POP:
			this->EQ_mode = MUSIC_EQ_NORMAL;
			eq_mode = CEDAR_AUD_EQ_TYPE_NORMAL;
			break;
			
	}

	DrawMusicEQModeButton(this->EQ_mode,PRESSED);
	robin_set_eq_mode(eq_mode);
	
	//DrawMusicEQModeStatus(this->EQ_mode);
	return EPDK_OK;
}
static __s32 music_player_set_BL_time(music_player_ctrl_t *this)
{

	if(this->BL_time == MUSIC_BL_LAST_90S)
	{
		this->BL_time = MUSIC_BL_ON;
	}
	else 
	{
		this->BL_time++;
	}
	DrawMusicBLTimeButton(this->BL_time,PRESSED);
	DrawMusicBLLastTimeStatus(this->BL_time);
	return EPDK_OK;
}

static __s32 music_player_set_play_previous(music_player_ctrl_t *this)
{
	music_list_ctrl_t *ListCtrl;
	char *filename;

	DrawMusicPlayPreButton(PRESSED);
	
	ListCtrl = this->list_ctrl;
	filename = this->play_file_info.filename;
		
	ListCtrl->OnPreviousKey((void *)ListCtrl);					//listbar on previous key
	
	get_music_list_focus_item_full_filename(ListCtrl, filename);	
	
	music_play_file(this, filename);				
	
	return EPDK_OK;
}
static __s32 music_player_set_play_next(music_player_ctrl_t *this)
{
	music_list_ctrl_t *ListCtrl;
	char *filename;

	DrawMusicPlayNextButton(PRESSED);
	
	ListCtrl = this->list_ctrl;
	filename = this->play_file_info.filename;
		
	ListCtrl->OnNextKey((void *)ListCtrl);					//listbar on previous key
	
	get_music_list_focus_item_full_filename(ListCtrl, filename);	
	
	music_play_file(this, filename);				
	
	return EPDK_OK;
}

static __s32 music_player_set_play_pause(music_player_ctrl_t *this)
{

	DrawMusicPlayPauseButton(PRESSED);
	
	if(robin_get_fsm_status() == CEDAR_STAT_PLAY)
	{
		robin_set_cmd_pause();
	}
	else
	{
		robin_set_cmd_play();
	}	
	return EPDK_OK;
}

static __s32 music_player_set_play_backward(music_player_ctrl_t *this)
{
	__s32 ret = 0;		
	__u32 total_time = 0, cur_time = 0;
	
	DrawMusicPlayBackwardButton(PRESSED);
	

	ret = robin_set_cmd_rr();
	
	total_time = robin_get_total_time();
	cur_time = robin_get_cur_time();

	GUI_LyrWinCacheOff();	
	DrawMusicPlayingTime(cur_time);
	//DrawMusicTotalTime(total_time);
	DrawMusicProgressBar(total_time, cur_time);		
	GUI_LyrWinCacheOn();
	
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	
	return EPDK_OK;
}

static __s32 music_player_set_play_forward(music_player_ctrl_t *this)
{
	__s32 ret = 0;		
	__u32 total_time = 0, cur_time = 0;
	
	DrawMusicPlayBackwardButton(PRESSED);
	

	ret = robin_set_cmd_ff();
	
	total_time = robin_get_total_time();
	cur_time = robin_get_cur_time();

	GUI_LyrWinCacheOff();	
	DrawMusicPlayingTime(cur_time);
	//DrawMusicTotalTime(total_time);
	DrawMusicProgressBarPoint(total_time, cur_time);		
	GUI_LyrWinCacheOn();
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);	
	return EPDK_OK;
}

static __s32 music_player_on_setting(music_player_ctrl_t *this)
{
	switch(this->menu_id)
	{
		case SET_PLAY_MODE:
			music_player_set_play_mode(this);
			break;					
		case SET_EQ_MODE:
			music_player_set_EQ_mode(this);
			break;
		case SET_BL_TIME:
			music_player_set_BL_time(this);
			break;
		case SET_PLAY_PREVIOUS:
			music_player_set_play_previous(this);
			break;
		case SET_PLAY_NEXT:
			music_player_set_play_next(this);
			break;
		case SET_PLAY_PAUSE:
			music_player_set_play_pause(this);
			break;
		case SET_PLAY_BACKWARD:
			music_player_set_play_backward(this);
			break;
		case SET_PLAY_FORWARD:
			music_player_set_play_forward(this);
			break;		
	}
	return EPDK_OK;
}
//设置播放器按键处理函数
static __s32 music_setting_player_key_proc(__gui_msg_t *msg)
{
	music_player_ctrl_t *this;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);

	if((KEY_DOWN_ACTION == msg->dwAddData2)||(KEY_REPEAT_ACTION == msg->dwAddData2))
	{
		switch(msg->dwAddData1)
		{
			case GUI_MSG_KEY_RIGHT:
			case GUI_MSG_KEY_LONGRIGHT:					
			case GUI_MSG_KEY_UP:
			case GUI_MSG_KEY_LONGUP:							
				DrawMusicPlayerContrlButtonByID(this,this->menu_id, UNFOCUSED);
				if(this->menu_id == SET_PLAY_FORWARD)
				{
					this->menu_id = SET_PLAY_MODE;
				}
				else
				{
					this->menu_id++;
				}
				DrawMusicPlayerContrlButtonByID(this,this->menu_id, FOCUSED);				
				break;
			case GUI_MSG_KEY_LEFT:	
			case GUI_MSG_KEY_LONGLEFT:
			case GUI_MSG_KEY_DOWN:
			case GUI_MSG_KEY_LONGDOWN:	
				DrawMusicPlayerContrlButtonByID(this,this->menu_id, UNFOCUSED);
				if(this->menu_id == SET_PLAY_MODE)
				{
					this->menu_id = SET_PLAY_FORWARD;
				}
				else
				{
					this->menu_id--;
				}
				DrawMusicPlayerContrlButtonByID(this,this->menu_id, FOCUSED);
				break;				
			case GUI_MSG_KEY_VADD:
				break;
			case GUI_MSG_KEY_VDEC:
				break;				
			case GUI_MSG_KEY_ENTER:	
			case GUI_MSG_KEY_MENU:
				if(KEY_DOWN_ACTION == msg->dwAddData2)				
				{
					music_player_on_setting(this);
				}
				break;

			case GUI_MSG_KEY_ESCAPE:		
				break;
			case GUI_MSG_KEY_RISE:
				break;
			default:
				break;				
		}
	}
	else if(KEY_UP_ACTION == msg->dwAddData2)
	{
		switch(msg->dwAddData1)
		{
			case GUI_MSG_KEY_ENTER:	
			case GUI_MSG_KEY_MENU:
				DrawMusicPlayerContrlButtonByID(this,this->menu_id, FOCUSED);	//按键抬起
				break;
			case GUI_MSG_KEY_LONGENTER:				
			case GUI_MSG_KEY_LONGMENU:
				if(this->menu_mode == MUSIC_SET_PLAYER_MODE)
				{
					this->menu_mode = MUSIC_EXPLORER_MODE;
					DrawMusicPlayerContrlButton(this);
					//ClearMusicPlayerContrlButtonBG();
					//draw spectrum();//画频谱图
				}	
				break;	
		}
	}	
	return EPDK_OK;
}

//按键消息处理函数
static __s32 music_player_win_key_proc(__gui_msg_t *msg)
{
	music_player_ctrl_t *player_ctrl;
	//music_list_ctrl_t *ListCtrl;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);
	//ListCtrl = player_ctrl->list_ctrl;
	
	switch(player_ctrl->menu_mode)
	{
		case MUSIC_EXPLORER_MODE:
			music_explorer_key_proc(msg);			//浏览器on key process
			break;
		case MUSIC_SET_PLAYER_MODE:
			music_setting_player_key_proc(msg);		//setting player on key process
			break;
		default:
			break;	
	}
	return EPDK_OK;

}


/*
************************************************************************************************************************
*Function	:           static __s32 music_player_win_on_timer(msg)
*
*Description	:			
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32 music_player_win_on_timer(__gui_msg_t *msg)
{
	music_player_ctrl_t *this;	
	__u32 total_time = 0, cur_time = 0;
	__cedar_status_t play_status;
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);

	if(!this->list_ctrl->visiable)
	{
		return EPDK_FAIL;
	}
	play_status = robin_get_fsm_status();
	if((play_status == CEDAR_STAT_FF)||(play_status == CEDAR_STAT_RR))
	{
		robin_set_cmd_play();
	}
	total_time = robin_get_total_time();
	cur_time = robin_get_cur_time();

	GUI_LyrWinCacheOff();	
	DrawMusicPlayingTime(cur_time);
	DrawMusicTotalTime(total_time);
	DrawMusicProgressBarPoint(total_time, cur_time);		
	GUI_LyrWinCacheOn();
	
	SPCTRM_Update();
	//MusicSpectrumUpdate(this);				//
	//GUI_LyrWinFlushFB(player_ctrl->music_layer);
	return EPDK_OK;
}

/*
************************************************************************************************************************
*Function	:           static __s32 music_player_win_on_close(__gui_msg_t *msg)
*
*Description	:				OnClose处理函数，释放FrameWin
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32 music_player_win_on_close(__gui_msg_t *msg)
{
		return GUI_FrmWinDelete(msg->h_deswin);			//send destroy message
}

/*
************************************************************************************************************************
*Function	:           static __s32  music_player_win_on_destroy(__gui_msg_t *msg)
*
*Description	:				OnDestroy处理函数，释放framewin 所有申请的资源
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32  music_player_win_on_destroy(__gui_msg_t *msg)
{
	music_player_ctrl_t *this;	
	this = (music_player_ctrl_t *)GUI_WinGetAttr(msg->h_deswin);	

	delete_music_list(this->list_ctrl);
	
	//MusicSpectrumSceneDelete(this);	
	music_player_device_uninit(this);
	
	esMEMS_Bfree(this, sizeof(music_player_ctrl_t));
	//explorer_free_listview_icon_res();	
	//explorer_listbar_uninit(msg->h_deswin);
	//explorer_rat_uninit(list_para);
  return EPDK_OK;
}

/*
************************************************************************************************************************
*Function	:          static __s32 music_player_scene_create(H_WIN  music_frame_win)
*
*Description	: 		music player 场景创建
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/
static __s32 music_player_scene_create(H_WIN  music_frame_win)
{	
	music_player_ctrl_t *player_ctrl;	
	music_list_para_t list_para;
	
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(music_frame_win);
	player_ctrl->h_framewin = music_frame_win;										//保存窗口句柄

	list_para.framewin = player_ctrl->h_framewin;
	list_para.layer = player_ctrl->music_layer;
	list_para.visiable = EPDK_TRUE;
	list_para.root_type = player_ctrl->root_type;
	list_para.media_type = player_ctrl->media_type;
		
	player_ctrl->list_ctrl = new_music_list(&list_para);
	
	music_player_device_init(player_ctrl);
	
	//player_ctrl->h_spectrum = MusicSpectrumSceneCreate(player_ctrl);
	
	//explorer_rat_init(list_para);
	//explorer_listbar_init(list_win);	
	//GUI_WinSetFocusChild(list_win);		//frame win get focus.	
	{
		char *filename = player_ctrl->play_file_info.filename;
		get_music_list_focus_item_full_filename(player_ctrl->list_ctrl, filename);	
		music_play_file(player_ctrl, filename);
	}
	
	return EPDK_OK;
}


/*
************************************************************************************************************************
*Function	:          static __s32 music_player_win_on_paint(H_WIN  music_frame_win)
*
*Description	: 		on paint message
*					
*Arguments  	: 		
*
*Return     	: 	
*
************************************************************************************************************************
*/

static __s32 music_player_win_on_paint(H_WIN  music_frame_win)
{

	music_player_ctrl_t *player_ctrl;
	player_ctrl = (music_player_ctrl_t *)GUI_WinGetAttr(music_frame_win);
	if (GUI_LyrWinGetSta(player_ctrl->background_layer) == GUI_LYRWIN_STA_SUSPEND)
	{
		return EPDK_FAIL;	
	}
	if(!player_ctrl->list_ctrl->visiable)
	{
		return EPDK_FAIL;
	}
	
	GUI_LyrWinSetBottom(player_ctrl->background_layer);
	GUI_LyrWinSetTop(player_ctrl->music_layer);
	
	draw_music_player_background(player_ctrl);	//画背景图

	show_music_list(player_ctrl->list_ctrl);
	
	DrawMusicHeadbar(player_ctrl);
	DrawMusicPlayer(player_ctrl);				
	
	return EPDK_OK;	
}


//获得媒体文件信息
static __s32 music_get_audio_file_info(music_player_ctrl_t *this, char *filename)
{

	robin_audio_info_t audio_file_info;
	eLIBs_memset(&audio_file_info, 0,sizeof(robin_audio_info_t));	
	robin_get_audio_info(filename, &audio_file_info);

	eLIBs_strcpy(this->play_file_info.artist,audio_file_info.artist);
	eLIBs_strcpy(this->play_file_info.album,audio_file_info.album);
	this->play_file_info.bitrate = audio_file_info.bps;
	this->play_file_info.filesize= eLIBs_GetFileSize(filename);		
	return EPDK_OK;
}


static __s32 music_play_file(music_player_ctrl_t *this, char *filename)
{
	__u32 total_time = 0, cur_time = 0;
	
	//char *filename = player_ctrl->play_file_info.filename;
	if(eLIBs_strlen(filename) == 0)
	{
		return EPDK_FAIL;
	}
	
	robin_set_cmd_stop();
	robin_set_cmd_play_file(filename, NULL);
	robin_set_cmd_play();
	
	GUI_ResetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);

	music_get_audio_file_info(this, filename);
	
	total_time = robin_get_total_time();
	cur_time = robin_get_cur_time();
	
	//GUI_LyrWinCacheOff();
	DrawMusicPlayingTime(cur_time);
	
	CleanMusicTotalTime();	
	DrawMusicTotalTime(total_time);
	
	DrawMusicProgressBar(0, 0);					//显示进度条
	
	DrawMusicPlayerFileInfo(&(this->play_file_info));					//显示文件信息
		
	//GUI_LyrWinCacheOn();
	
	return EPDK_OK;
	//robin_set_cmd_play();	
}
static __s32 music_player_on_timer(void)
{


	return EPDK_OK;
}
//初始化音频设备
static __s32 music_player_device_init(music_player_ctrl_t *this)
{
	char app_name[32];
	char load_name[128];
	__s32  value;
	
	__inf("_init begining!\n");

	/*open display*/
	//ADE_Open();
	
	robin_open(ROBIN_MODE_AUDIO_MIN, NULL);		

	robin_enable_spectrum();
	
	robin_set_eq_mode(CEDAR_AUD_EQ_TYPE_NORMAL);
	robin_set_ff_rr_speed(32);

	this->play_mode = RAT_PLAY_MODE_SEQUENCE;
	robin_set_play_mode(this->play_mode);
	
	GUI_SetTimer(this->h_framewin, MusicTimerId, MUSIC_TIMER_INTERVAL, NULL);
	
	return EPDK_OK;
}

//卸载音频设备
static __s32 music_player_device_uninit(music_player_ctrl_t *player_ctrl)
{
	/*close robin*/
	robin_close();
	/*close de*/
	//ADE_Close();	

	GUI_KillTimer(player_ctrl->h_framewin, MusicTimerId);

	return EPDK_OK;
}

//




